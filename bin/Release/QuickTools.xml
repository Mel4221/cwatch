<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuickTools</name>
    </assembly>
    <members>
        <member name="T:QuickTools.Options">
            <summary>
            The option class provide you an easy way to create a menu that can be used with the arrows up and down 
            on a console eviroment .s
            </summary>
        </member>
        <member name="F:QuickTools.Options.SelectorR">
            <summary>
            This Control the Right simbol from the selector and the default simbol is ">"
            </summary>
        </member>
        <member name="F:QuickTools.Options.SelectorL">
            <summary>
            This Control the Left simbol from the selector and the default simbol is ">"
            </summary>
        </member>
        <member name="F:QuickTools.Options.CurrentSelection">
            <summary>
            This contains the initial selection or default 
            </summary>
        </member>
        <member name="F:QuickTools.Options.Label">
            <summary>
            The label that will be in top of the options
            </summary>
        </member>
        <member name="F:QuickTools.Options.OptionList">
            <summary>
            Options List container 
            </summary>
        </member>
        <member name="M:QuickTools.Options.ClearOptions">
            <summary>
            Clears All the options.
            </summary>
        </member>
        <member name="M:QuickTools.Options.Display">
            <summary>
            Display the Options listed in the OptionsList 
            </summary>
        </member>
        <member name="M:QuickTools.Options.Pick">
            <summary>
            Select  the options listed and returns the number of the selection
            This instance is the one that start the 
            Selection process so even thouth you may call
            the Constructor you may need to also start the Selction 
            with Select example
            var app = new Options(string[] list||List<object/>||bool true || false);
            app.Select(); 
            </summary>
            <returns>The select.</returns>
        </member>
        <member name="M:QuickTools.Options.#ctor">
            <summary>
            This initialization does not contains any implementation
            Initializes a new instance of the <see cref="T:QuickTools.Options"/> class.
            </summary>
        </member>
        <member name="M:QuickTools.Options.#ctor(System.String[])">
            <summary>
            Create the List of options by passing an array 
            Initializes a new instance of the <see cref="T:QuickTools.Options"/> class.
            </summary>
            <param name="options">Options.</param>
        </member>
        <member name="M:QuickTools.Options.#ctor(System.String[],System.Boolean)">
            <summary>
            This Options love simplicity so it shouses automatically and take out 
            the simbols on the side 
            </summary>
            <param name="options"></param>
            <param name="Simple"></param>
        </member>
        <member name="M:QuickTools.Options.#ctor(System.Collections.Generic.List{System.Object})">
            <summary>
            Create a list of options by passing a generic list 
            Initializes a new instance of the <see cref="T:QuickTools.Options"/> class.
            </summary>
            <param name="options">Options.</param>
        </member>
        <member name="M:QuickTools.Options.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Options"/> class.
            If you would like to get basically an answer were the first shoudl be answer should be 
            NO you shoudl just type new Options(true); other wise the order would be back wards
            remember that the return type will be always the same location in the array 
            so it you select now if you select the yes it will return 0 which is the position of in the array 
            </summary>
            <param name="type">If set to <c>true</c> type.</param>
        </member>
        <member name="M:QuickTools.Options.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Options"/> class.
            </summary>
            <param name="options">Options.</param>
            <param name="typeOfOptions">Type of options.</param>
        </member>
        <member name="M:QuickTools.Options.Select">
            <summary>
            Select The Option from the OptionList.
            </summary>
            <returns>The select.</returns>
        </member>
        <member name="T:QuickTools.IRandom">
            <summary>
            This Class create random Passwords or Pin and the Passwords contains letters,symbols and numbers 
            </summary>
        </member>
        <member name="T:QuickTools.CreateRandom">
            <summary>
            This Class create random Passwords or Pin and the Passwords contains letters,symbols and numbers 
            </summary>
        </member>
        <member name="T:QuickTools.New">
            <summary>
            This Class create random Passwords or Pin and the Passwords contains letters,symbols and numbers 
            </summary>
        </member>
        <member name="F:QuickTools.New.Generated">
            <summary>
            Contains the password Generated 
            </summary>
        </member>
        <member name="F:QuickTools.New.LowerCase">
            <summary>
            This Contains the array of the 
            </summary>
        </member>
        <member name="M:QuickTools.New.Password">
            <summary>
            Generate a Random Passord with a max 9 digits
            </summary>
            <returns>The password.</returns>
        </member>
        <member name="M:QuickTools.New.Password(System.Int32,System.Boolean)">
            <summary>
            Password the specified passwordLenght and noSpecialSimbols.
            </summary>
            <returns>The password.</returns>
            <param name="passwordLenght">Password lenght.</param>
            <param name="noSpecialSimbols">If set to <c>true</c> no special simbols.</param>
        </member>
        <member name="M:QuickTools.New.RandomText(System.Int32)">
            <summary>
            Generat Randoms text completly chunked together useful to create random passwords or anything that requires a long string of text.
            </summary>
            <returns>The text.</returns>
            <param name="textLength">Text length.</param>
        </member>
        <member name="M:QuickTools.New.Password(System.Int32)">
            <summary>
            Password the specified passwordLenght.
            </summary>
            <returns>The password.</returns>
            <param name="passwordLenght">Password lenght.</param>
        </member>
        <member name="F:QuickTools.New.pin">
            <summary>
            The pin generated
            </summary>
        </member>
        <member name="M:QuickTools.New.Pin">
            <summary>
            This Method create a random pin of 4 digits and return it 
            </summary>
            <returns>The pin.</returns>
        </member>
        <member name="M:QuickTools.New.Pin(System.Int32)">
            <summary>
            Create a pin of the specified length.
            </summary>
            <returns>The pin.</returns>
            <param name="Level">Level.</param>
        </member>
        <member name="M:QuickTools.New.RandomByteArray(System.Int32)">
            <summary>
            Create a Random Byte Array of the specified length 
            and return it back on a byte array 
            </summary>
            <returns>The byte array.</returns>
            <param name="arrayLength">Array length.</param>
        </member>
        <member name="M:QuickTools.New.RandomByteArray(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a random byte array and allow you to costumice the limits of the random numbers
            that will be into it 
            </summary>
            <returns>The byte array.</returns>
            <param name="arrayLength">Array length.</param>
            <param name="minimumRange">Minimum range.</param>
            <param name="maximumRange">Maximum range.</param>
        </member>
        <member name="M:QuickTools.New.RandomInt(System.Int32,System.Int32)">
            <summary>
            Create a random number based on the rules that are passed 
            and retun it 
            </summary>
            <returns>int value</returns>
            <param name="from">From.</param>
            <param name="until">Until.</param>
        </member>
        <member name="M:QuickTools.New.RandomByte">
            <summary>
            it generate a random byte from 0 to 250
            and it uses the Random.Next(min,max)
            under it for it to work 
            </summary>
            <returns>Single Byte</returns>
        </member>
        <member name="F:QuickTools.New.KeyGenerated">
            <summary>
            This  hold the key of 16 bits already generated
            by the RandomByteKey() generator 
            </summary>
        </member>
        <member name="M:QuickTools.New.RandomByteKey">
            <summary>
            Randoms the byte key generate a random byte key 
            that could be used for encrypting and it has a 16 bits length
            </summary>
            <returns>The byte key.</returns>
        </member>
        <member name="M:QuickTools.New.RandomByteKey(System.Boolean)">
            <summary>
            Randoms the byte key this works on the same way than RandomByteKey()
            but if it is passed as argument true like RandomByteKey(true)
            it will create a file and it will save it under the data/qt/secure.key
            and on this version it DOES NOT ENCRYPT IT  so it has to be manually 
            encrypted .
            </summary>
            <returns>byte[] array </returns>
            <param name="autoSave">If set to <c>true</c> auto save.</param>
        </member>
        <member name="T:QuickTools.Color">
            <summary>
            Color Class that contains an array of methods to give color to the console
            and they can be used like this Color.Red(object); 
            or just by initializing it  example : new Color("red"); .
            lastly by calling the method without any parameter like : Color.Green();  
            and until the Console.Reset(); is not provided it will keep going so 
            if you use the Color.Green(); meke sure of using Get.Reset(); at the end of where you want it to stop giving that color.
            </summary>
        </member>
        <member name="M:QuickTools.Color.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Color"/> class.
            No Funtionalite are added to the Constructor without any parameters
            </summary>
        </member>
        <member name="M:QuickTools.Color.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Color"/> class.
            This contructor allows you to give the color whitout having to write more code
            by just calling new Color("colorName");  then the fallowing code will be 
            the one passed through it.
            </summary>
            <param name="color">Color.</param>
        </member>
        <member name="M:QuickTools.Color.#ctor(System.String,System.Object)">
            <summary>
             This constructor allows you to pass contect when is initialize and give the color that
             is passed  to it 
             
             </summary>  
             <param name="color">Color</param> <param name="content">Text or object</param>         
        </member>
        <member name="M:QuickTools.Color.Gray">
            <summary>
             This Method color the entired text gray 
             </summary>   
        </member>
        <member name="M:QuickTools.Color.Cyan">
            <summary>
             This Method color the entired text Cyan 
             </summary>   
        </member>
        <member name="M:QuickTools.Color.Red">
            <summary>
             This Method color the entired text Red 
             </summary>              
        </member>
        <member name="M:QuickTools.Color.Black">
            <summary>
             This Method color the entired text Black 
             </summary>              
        </member>
        <member name="M:QuickTools.Color.Blue">
            <summary>
             This Method color the entired text Blue 
             </summary>   
        </member>
        <member name="M:QuickTools.Color.Green">
            <summary>
             This Method color the entired text Green 
             </summary>              
        </member>
        <member name="M:QuickTools.Color.Yellow">
            <summary>
             This Method color the entired text Yellow 
             </summary>   
        </member>
        <member name="M:QuickTools.Color.Pink">
            <summary>
             This Method color the entired text Magenta or what i call pink 
             </summary>              
        </member>
        <member name="M:QuickTools.Color.Back_Yellow">
            <summary>
             Color the background of the Yellow Color
             </summary>   
        </member>
        <member name="M:QuickTools.Color.Back_Red">
            <summary>
             Color the background of the Yellow Red
             </summary> 
        </member>
        <member name="M:QuickTools.Color.Back_Blue">
            <summary>
             Color the background of the Yellow Blue
             </summary> 
        </member>
        <member name="M:QuickTools.Color.Back_Pink">
            <summary>
             Color the background of the Yellow Pink or Magenta
             </summary> 
        </member>
        <member name="M:QuickTools.Color.Back_Green">
            <summary>
             Color the background of the Yellow Green
             </summary> 
        </member>
        <member name="M:QuickTools.Color.Gray(System.Object)">
            <summary>
            Console the text using the name of the color 
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Cyan(System.Object)">
            <summary>
            <seealso cref="M:QuickTools.Color.Gray(System.Object)"/>
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Red(System.Object)">
            <summary>
            <seealso cref="M:QuickTools.Color.Gray(System.Object)"/>
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Blue(System.Object)">
            <summary>
            Blue the specified text.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Green(System.Object)">
            <summary>
            Green the specified text.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Green(System.Object,System.Int32)">
            <summary>
            Green the specified text and tabs.
            </summary>
            <param name="text">Text.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Color.Black(System.Object,System.Int32)">
            <summary>
            Black the specified text and tabs.
            </summary>
            <param name="text">Text.</param>
            <param name="tabs">Tabs are refering to the \n char.</param>
        </member>
        <member name="M:QuickTools.Color.Black(System.Object)">
            <summary>
            Black the specified msg.
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Color.Yellow(System.Object)">
            <summary>
            Yellow the specified msg.
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Color.Yellow(System.Object,System.Int32)">
            <summary>
            Yellow the specified text and tabs.
            </summary>
            <param name="text">Text.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Color.Pink(System.Object)">
            <summary>
            Pink the specified text.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Back_Yellow(System.Object)">
            <summary>
            Backs the yellow.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Back_Red(System.Object)">
            <summary>
            Backs the red.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Back_Blue(System.Object)">
            <summary>
            Backs the blue.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Back_Pink(System.Object)">
            <summary>
            Backs the pink.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Back_Green(System.Object)">
            <summary>
            Backs the green.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Color.Border(System.Object)">
            <summary>
            Border the specified content.
            </summary>
            <param name="content">Content.</param>
        </member>
        <member name="M:QuickTools.Color.Border(System.Object,System.Object)">
            <summary>
            Border the specified content and simbol.
            </summary>
            <param name="content">Content.</param>
            <param name="simbol">Simbol.</param>
        </member>
        <member name="T:QuickTools.User">
            <summary>
            This class simplified the creation of a regular login for a console application
            </summary>
        </member>
        <member name="P:QuickTools.User.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:QuickTools.User.LatName">
            <summary>
            Gets or sets the last name 
            </summary>
            <value>The name of the lat.</value>
        </member>
        <member name="P:QuickTools.User.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:QuickTools.User.Dob">
            <summary>
            Gets or sets the date of birth.
            </summary>
            <value>The dob.</value>
        </member>
        <member name="P:QuickTools.User.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
            <value>The phone.</value>
        </member>
        <member name="P:QuickTools.User.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="M:QuickTools.User.#ctor(System.String,System.String)">
             <summary>
            Constructor that set the name and password
              Initializes a new instance of the <see cref="T:QuickTools.User"/> class.
             </summary>
             <param name="name">Name.</param>
             <param name="password">Password.</param>
        </member>
        <member name="M:QuickTools.User.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            constructor that pass all the data at once 
            Initializes a new instance of the <see cref="T:QuickTools.User"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="lastName">Last name.</param>
            <param name="password">Password.</param>
            <param name="dob">Dob.</param>
            <param name="phone">Phone.</param>
            <param name="email">Email.</param>
        </member>
        <member name="M:QuickTools.User.#ctor">
            <summary>
            Not Implemented
            </summary>
        </member>
        <member name="M:QuickTools.User.Set(QuickTools.User)">
            <summary>
            Set the specified user data.
            </summary>
            <param name="user">User.</param>
        </member>
        <member name="T:QuickTools.Get">
            <summary>
            Get The bigest class In Quicktools
            does multiple stuff and contains must of the 
            tools that started this Project.
            </summary>
        </member>
        <member name="M:QuickTools.Get.WaitTime(System.Int32)">
            <summary>
            WaitTime basically is an abstraction of 
            System.Threading.Sleep(<paramref name="milliSecondsOrseconds"/>);
            and it basically wait the time in it , it also 
            contains a try catch just in case if something fails
            </summary>
            <param name="milliSecondsOrseconds">Sleep time.</param>
        </member>
        <member name="M:QuickTools.Get.WaitTime">
            <summary>
            Does the same than the waittime with no param 
            but this only wait or sleep 1000 milliseconds 
            </summary>
        </member>
        <member name="M:QuickTools.Get._(System.Int32)">
            <summary>
            This does the same thing than WaitTime with param but it actually
            has a different name 
            </summary>
            <param name="sleepTime">Sleep time.</param>
        </member>
        <member name="M:QuickTools.Get.CurrentPath">
            <summary>
            This method Returns the current path from the application
            </summary>
            <returns>Returns the current path</returns>
        </member>
        <member name="F:QuickTools.Get.Path">
            <summary>
            Abstraction for Directory.GetCurrentDirectory(); 
            returns the current string path 
            </summary>
        </member>
        <member name="M:QuickTools.Get.DataPath">
            <summary>
            This method Create a folder inside the root of the program
            and create a folder that can be use for the program 
            it work like this ProgramRoot/data/qt/...
            also if the program has a folder that is already called data
            it will not override it 
            </summary>
            <returns>string path </returns>
        </member>
        <member name="M:QuickTools.Get.SaveKey">
            <summary>
            This method can used manually
            or automatically 
            by calling directly the RandomByteKey(true); 
            and adding the parameter the bool true 
            for it to auto save the key 
            </summary>
        </member>
        <member name="M:QuickTools.Get.SaveKey(System.String)">
            <summary>
            Save the key Generated on the given path 
            </summary>
            <param name="pathToSaveTheKey">Path to save the key.</param>
        </member>
        <member name="M:QuickTools.Get.KeyBytesSaved">
            <summary>
            This Method gets the key bytes that were saved before by using the method 
            before that was the method save key 
            </summary>
            <returns>The bytes saved.</returns>
        </member>
        <member name="M:QuickTools.Get.KeyBytesSaved(System.String)">
            <summary>
            Read the string bytes stored in a file 
            </summary>
            <returns>The bytes saved.</returns>
            <param name="path">Path.</param>
        </member>
        <member name="M:QuickTools.Get.Check">
            <summary>
             This basically just check if a name could be a valid
            name for a file in windows mainly and it 
            returns true if the check it is correct 
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="F:QuickTools.Get.Text">
            <summary>
            Return the text taken by any of the fallowing 
            Get.Input()
            Get.InputText(); 
            </summary>
        </member>
        <member name="F:QuickTools.Get.Number">
            <summary>
            Returns the Number taken by the fallowing
            Get.Input();
            Get.NumberInput(); 
            </summary>
        </member>
        <member name="F:QuickTools.Get.input">
            <summary>
             Returns the text taken by
             Get.Input();
             </summary>           
        </member>
        <member name="F:QuickTools.Get.Key">
            <summary>
             Returns the Key from  the Get.KeyInput()
             method 
            </summary>           
        </member>
        <member name="M:QuickTools.Get.KeyInput">
            <summary>
            This method gets the key pressed and it returns it 
            on the same way it gets it , it also send it to the Key field
            </summary>
            <returns>object key pressed</returns>
        </member>
        <member name="M:QuickTools.Get.KeyChar">
            <summary>
            This method allows you to get the Character value 
            and return it as anstring 
            </summary>
            <returns>The char.</returns>
        </member>
        <member name="M:QuickTools.Get.KeyNumber">
            <summary>
             this does the same thing than the Get.KeyInput()
             but it only works with numbers
             it will only read and hold the numbers pressed and it will 
             return them  or  it will send a copy to the fallowing fields
             Get.Number
             Get.Key
             </summary> 
            <returns>int Key Number</returns>          
        </member>
        <member name="F:QuickTools.Get.InputChar">
            <summary>
            This is the char that is located at the biggining of the 
            Get.Input() method and it has to be added a method where
            it will save the char if is changed
            </summary>
        </member>
        <member name="M:QuickTools.Get.Input">
            <summary>
             This Method Get the input from the keyboard
             and it returns an object and is an implementation of
             Console.ReadLine();
             Get.LabelSide()
             int.TryParse();
             all together 
             </summary>           
             <returns> Object input either number or text </returns>
        </member>
        <member name="M:QuickTools.Get.Input(System.String)">
            <summary>
             This Method does the same as Input() without any 
             arguments but with the only diference that the char
             on the side at the bigging could be edited 
             like Get.Input("Write Your Name");
             </summary>
             <returns> object Input either text or number</returns>
        </member>
        <member name="M:QuickTools.Get.IsNumber(System.Object)">
            <summary>
            This is a very generic Number Checker
            that veryfied if the input passed as an argument
            could be a number or not and it returns
            true or false if is or not a number
            </summary>
            <returns>Retursn True or False if is number : True if is not a number returns: false</returns>
            <param name="input">Input.</param>
        </member>
        <member name="M:QuickTools.Get.NumberInput">
            <summary>
            Get the Number from the input introduced 
            </summary>
            <returns>The input.</returns>
        </member>
        <member name="M:QuickTools.Get.NumberInput(System.Boolean)">
            <summary>
            Get a number in put and returns a double 
            </summary>
            <returns>The input.</returns>
            <param name="BigNumber">If set to <c>true</c> big number.</param>
        </member>
        <member name="M:QuickTools.Get.TextInput">
            <summary>
            TextInput Method ReadText from the Console and return text
            has magenta color design and also it send the current text
            to the Get.Text Field 
            </summary>
            <returns>The input.</returns>
        </member>
        <member name="M:QuickTools.Get.TextInput(System.String)">
            <summary>
            This Read text from the console and return it on an string format
            it also has <see langword="async"/> label which is printed on top of it 
            </summary>
            <returns>The input.</returns>
            <param name="textToDisplayOnTop">textToDisplayOnTop.</param>
        </member>
        <member name="M:QuickTools.Get.Reset">
            <summary>
            Shortcut for Console.Reset(); 
            </summary>
        </member>
        <member name="M:QuickTools.Get.Cle">
             <summary>
            shurtcut for Console.Clear(); 
             </summary>
        </member>
        <member name="M:QuickTools.Get.Clear">
            <summary>
            shurtcut for Console.Clear(); 
            </summary>
        </member>
        <member name="M:QuickTools.Get.Label(System.Object)">
            <summary>
            Write text with background color in color magentaand some space around it 
            and seems like a type of a label and takes an argument of an object to avoid casting
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Get.LabelSide(System.Object)">
            <summary>
            simmilar to Console.Write
            but prints to the console a text on magenta
            </summary>
            <param name="msg">Message content</param>
        </member>
        <member name="M:QuickTools.Get.LabelSingle(System.Object)">
            <summary>
            Print Text on the side of the console using Console.Write
            and gives it a Magenta color 
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Get.Title(System.Object)">
            <summary>
            Console.Title implementation 
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Get.Title(System.Object,System.Int32)">
            <summary>
            Console.WriteLine(object) implementation with \n to give the text more space
            to the right 
            </summary>
            <param name="msg">Message.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Get.Box(System.Object)">
            <summary>
            Box the specified content.
            </summary>
            <param name="content">Content.</param>
        </member>
        <member name="M:QuickTools.Get.Box(System.Object,System.Object)">
            <summary>
            Box the specified content and simbol.
            </summary>
            <param name="content">Content.</param>
            <param name="simbol">Simbol.</param>
        </member>
        <member name="M:QuickTools.Get.Box(System.Object,System.Int32)">
            <summary>
            Box the specified content and tabs.
            </summary>
            <param name="content">Content.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Get.Box(System.Object,System.String,System.Int32)">
            <summary>
            Box the specified content, simbol and tabs.
            </summary>
            <param name="content">Content.</param>
            <param name="simbol">Simbol.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Get.Wrong(System.Object)">
            <summary>
            Write Text with Console.WriteLine add red color and wait for a key to be pressed 
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Get.WrongIn(System.Object)">
            <summary>
            Write Text with Console.WriteLine add red color and wait for a key to be pressed 
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Get.WrongInput(System.Object)">
            <summary>
            Write Text with Console.WriteLine add red color and wait for a key to be pressed 
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Get.NotFound(System.Object)">
            <summary>
            Alert Not found write the file that was not founded and print it on color red
            </summary>
            <param name="msg">Message.</param>
        </member>
        <member name="M:QuickTools.Get.Wait">
            <summary>
            Wait for a key to be pressed 
            </summary>
        </member>
        <member name="M:QuickTools.Get.Wait(System.Object)">
            <summary>
            Very similar to Console.ReadKey
            but it has some content added to display
            the Text from it and is basically used
            to display the text witout closing the console
            in some cases the console will close to quickly 
            </summary>
            <param name="Caller">Text Needed to be printed</param>
        </member>
        <member name="M:QuickTools.Get.Ok">
            <summary>
            Literally Print a line saying ok 
            on color green 
            </summary>
        </member>
        <member name="M:QuickTools.Get.Ok(System.Int32)">
            <summary>
            This is just used when you need to see if some logic is working as spected
            so each ok number provide a different color and each of them are from 0 to 4 
            and the colors available are (Green, Yellow , Blue ,  Red , Cyan )
            </summary>
            <param name="colorNumber">Color number.</param>
        </member>
        <member name="M:QuickTools.Get.Alert(System.Object)">
            <summary>
            Similar to Console.WriteLine(object); 
            but add a box of color yellow saying alert
            and the fallowing text that is pass as an argument
            will be printed on yellow color 
            </summary>
            <param name="msg">Message Content</param>
        </member>
        <member name="M:QuickTools.Get.Hide">
            <summary>
            this is a very smallintent of  trying to hide the password
            while is being pressed 
            </summary>
        </member>
        <member name="M:QuickTools.Get.HideText">
            <summary>
            This try to hide the text
            </summary>
        </member>
        <member name="M:QuickTools.Get.W(System.Object)">
            <summary>
            Console.WriteLine(object) shurtcut
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Get.Write(System.Object)">
            <summary>
            Write the specified text.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Get.C(System.Object)">
            <summary>
            Write the specified text.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:QuickTools.Get.W(System.Object,System.Int32)">
            <summary>
            Write the specified text and tabs.
            </summary>
            <param name="text">Text.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Get.Write(System.Object,System.Int32)">
            <summary>
            Write the specified text and tabs.
            </summary>
            <param name="text">Text.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Get.C(System.Object,System.Int32)">
            <summary>
            Write the specified text and tabs.
            </summary>
            <param name="text">Text.</param>
            <param name="tabs">Tabs.</param>
        </member>
        <member name="M:QuickTools.Get.About">
               public static string Version = "A032022";
               private static string lastModified = "03/23/2022";
            
            <summary>
            This Print QuickTools logo to the console , not really useful , but looks cool . 
            </summary>
        </member>
        <member name="T:QuickTools.Do">
            <summary>
            Extention Of Get Due to Old Programs using this abstraction
            </summary>
        </member>
        <member name="T:QuickTools.Decrypter">
            <summary>
            ************
            *NOT STABLE*
            ************
            This class basically dencrypt the files and contaings 
            2 Methods 1  that read the encrypted that from the file
            then it will decrypt the data and will write it back to the file
            </summary>
        </member>
        <member name="M:QuickTools.Decrypter.GetList(System.String)">
            <summary>
            This Member Can not be Accest to due to 
            it main funtionality is only to read the data from
            the file and converted in a way that it can be 
            desencrypted.
            </summary>
            <returns>The list.</returns>
            <param name="file">File.</param>
        </member>
        <member name="M:QuickTools.Decrypter.DecryptFile(System.String,System.Object)">
            <summary>
            This method basically works by passing the fileto it 
            as the first argument then the password wich would end up
            being written to the file passed in first place after desencrypting 
            the file. 
            </summary>
            <param name="fileToDecrypt">File to decrypt.</param>
            <param name="FilePassword">File password.</param>
        </member>
        <member name="T:QuickTools.Reader">
            <summary>
            This class Read Files content
            </summary>
        </member>
        <member name="T:QuickTools.Reader.Stored">
            <summary>
            This class save the Data from the Reader
            </summary>
        </member>
        <member name="F:QuickTools.Reader.Stored.RowData">
            <summary>
            This Contain the Row Data into an stringBuilder
            </summary>
        </member>
        <member name="F:QuickTools.Reader.Stored.ListData">
            <summary>
            contain The list data.
            </summary>
        </member>
        <member name="F:QuickTools.Reader.Stored.BytesData">
            <summary>
            The bytes data.
            </summary>
        </member>
        <member name="F:QuickTools.Reader.RowData">
            <summary>
            Contains the row data readed 
            </summary>
        </member>
        <member name="F:QuickTools.Reader.EmptySpacesCount">
            <summary>
            The empty spaces count in a file
            </summary>
        </member>
        <member name="M:QuickTools.Reader.ReadStoredBytes(System.String)">
            <summary>
            Reads bytes stored into a file and return it 
            </summary>
            <returns>The stored bytes.</returns>
            <param name="file">the files that contains the bytes.</param>
        </member>
        <member name="M:QuickTools.Reader.ReadArray(System.String)">
            <summary>
            Read and array that is listed on a file and retursn a Generic.List 
            </summary>
            <returns>The array.</returns>
            <param name="file">File.</param>
        </member>
        <member name="M:QuickTools.Reader.ReadFile(System.String)">
            <summary>
            Read the entired file and returns the text from it 
            </summary>
            <returns>The file.</returns>
            <param name="file">File.</param>
        </member>
        <member name="F:QuickTools.Reader.ReadLength">
            <summary>
            Contais the length of the file that is being readed 
            this uses the FileStream and is an astraction that has the FileMode.Open , and FileAccess.Read
            </summary>
        </member>
        <member name="M:QuickTools.Reader.Read(System.String)">
            <summary>
            Read a file and return the string data listed in it 
            </summary>
            <returns>The read.</returns>
            <param name="file">File.</param>
        </member>
        <member name="T:QuickTools.Writer">
            <summary>
            Write content into files
            </summary>
        </member>
        <member name="M:QuickTools.Writer.WriteFile(System.String,System.Object)">
            <summary>
            Writes the content passed into a file
            </summary>
            <param name="file">File.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:QuickTools.Writer.WriteFile(System.String,System.Object,System.Boolean)">
            <summary>
            Writes the data into a file and if the last argument is true will Oveerride the content .
            </summary>
            <param name="file">File.</param>
            <param name="data">Data.</param>
            <param name="CanOverWrite">If set to <c>true</c> overrite or create.</param>
        </member>
        <member name="M:QuickTools.Writer.WriteArray(System.String,System.String[])">
            <summary>
            This method writes to a file an entired array of type string
            </summary>
            <param name="fileName">File name.</param>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Writer.WriteArray(System.String,System.Int32[])">
            <summary>
            This method writes to a file an entired array of type int
            </summary>
            <param name="fileName">File name.</param>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Writer.WriteArray(System.String,System.Byte[])">
            <summary>
            This method writes to a file an entired array of type byte
            </summary>
            <param name="fileName">File name.</param>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Writer.CreateFile(System.String,System.Object)">
            <summary>
            Creates a file and write the content that is passed.
            </summary>
            <param name="fileName">File name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:QuickTools.Writer.CreateFile(System.String)">
            <summary>
            Creates the file passed as an argument
            </summary>
            <returns>The file.</returns>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:QuickTools.Writer.Write(System.String,System.Object)">
            <summary>
            Write the content on a file and this use the FileStream on FileMode.Create and FileAccess.Write
            </summary>
            <param name="file">File.</param>
            <param name="data">Data.</param>
        </member>
        <member name="T:QuickTools.Binary">
            <summary>
            Binary Class Allows you to Handle Binary Data
            </summary>
        </member>
        <member name="M:QuickTools.Binary.CopyBinaryFile(System.String,System.String)">
            <summary>
            Copies the binary file.
            </summary>
            <returns><c>true</c>, if binary file was copyed, <c>false</c> otherwise.</returns>
            <param name="srcfilename">Srcfilename.</param>
            <param name="destfilename">Destfilename.</param>
        </member>
        <member name="M:QuickTools.Binary.CopyTextFile(System.String,System.String)">
            <summary>
            Copies the text file.
            </summary>
            <returns><c>true</c>, if text file was copyed, <c>false</c> otherwise.</returns>
            <param name="srcfilename">Srcfilename.</param>
            <param name="destfilename">Destfilename.</param>
        </member>
        <member name="T:QuickTools.C">
            <summary>
            this was created entrily for fun 
             but it could be usful if you hate to write Consol.WriteLine("content"); 
            they are basycally many language added but sadly there are some that only works 
            with a costructor example : new echo("content"); 
            </summary>
        </member>
        <member name="M:QuickTools.C.Log(System.Object)">
            <summary>
            Log the specified input.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="M:QuickTools.C.W(System.Object)">
            <summary>
            Write to the console the specified input.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="M:QuickTools.C.Write(System.Object)">
            <summary>
            Write the specified input.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.console">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="M:QuickTools.console.log(System.Object)">
            <summary>
            Log the specified input.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.echo">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="M:QuickTools.echo.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.echo"/> class.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.printf">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="M:QuickTools.printf.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.printf"/> class.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.System">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="T:QuickTools.System.Out">
            <summary>
            Print the text basically 
            </summary>
        </member>
        <member name="M:QuickTools.System.Out.println(System.Object)">
            <summary>
            Println the specified input.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.print">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="M:QuickTools.print.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.print"/> class.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.puts">
            <summary>
            print the text inspired in ruby 
            </summary>
        </member>
        <member name="M:QuickTools.puts.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.puts"/> class.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.writeln">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="M:QuickTools.writeln.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.writeln"/> class.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.print_string">
            <summary>
            Write to the console the specified input.
            </summary>
        </member>
        <member name="M:QuickTools.print_string.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.print_string"/> class.
            </summary>
            <param name="input">Input.</param>
        </member>
        <member name="T:QuickTools.Log">
            <summary>
            This class create a quick way of writting logs inside QuickTools
            </summary>
        </member>
        <member name="M:QuickTools.Log.Event(System.String,System.Object)">
            <summary>
            Create a file tha will containe the event of the specified name and matter.
            </summary>
            <param name="name">Name.</param>
            <param name="matter">Matter.</param>
        </member>
        <member name="M:QuickTools.Log.Text(System.String,System.Object)">
            <summary>
            Log Text the specified matter on the file .
            </summary>
            <param name="nameOfThefile">Name of thefile.</param>
            <param name="matter">Matter.</param>
        </member>
        <member name="T:QuickTools.List">
            <summary>
            
            </summary>
        </member>
        <member name="M:QuickTools.List.#ctor">
            <summary>
            No Implementation ________
            Initializes a new instance of the <see cref="T:QuickTools.List"/> class.
            
            </summary>
        </member>
        <member name="M:QuickTools.List.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.List"/> class.
            </summary>
            <param name="rowList">Row list.</param>
        </member>
        <member name="M:QuickTools.List.#ctor(System.String[])">
            <summary>
            Add the list to the Selection List __________
            Initializes a new instance of the <see cref="T:QuickTools.List"/> class.
            </summary>
            <param name="list">List.</param>
        </member>
        <member name="M:QuickTools.List.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Add the list to the Selection List __________
            Initializes a new instance of the <see cref="T:QuickTools.List"/> class.
            </summary>
            <param name="list">List.</param>
        </member>
        <member name="F:QuickTools.List.SelectionList">
            <summary>
            Contains the selection list 
            </summary>
        </member>
        <member name="F:QuickTools.List.RowSelection">
            <summary>
            Contains the Row String that needs to be parsed into multiple pices 
            </summary>
        </member>
        <member name="M:QuickTools.List.Pick">
            <summary>
            Pick the string in the array or list. 
            </summary>
            <returns>The List selection.</returns>
        </member>
        <member name="T:QuickTools.LoopInput">
             <summary>
            LoopInput allows you to keep getting an imput constantly in a Console Application
            and callect the entired input and return it in a single string or it can be access aswell
             by calling the LoopInput.Data.
             </summary>
        </member>
        <member name="F:QuickTools.LoopInput.Data">
            <summary>
            The Return Data will have to be provided by a method due to 
            lack of simplicity
            </summary>
        </member>
        <member name="M:QuickTools.LoopInput.PrintList">
            <summary>
             this can not be cause is handled only by the Start Method .
            </summary>
        </member>
        <member name="M:QuickTools.LoopInput.Start">
            <summary>
            Start is basically a while loop that contains the Get.TextInput to collect
            the input and the loop just repeat it until the key period "."  is entered or if the 
            text input equal to the fallowing "done", "exit","done","d"
            </summary>
            <returns>The InputData or rowdata callected by the Input.</returns>
        </member>
        <member name="M:QuickTools.LoopInput.RowData">
            <summary>
            RowData method is a method that callects
            all the data in the List and it return into a row string
            </summary>
            <returns>The data.</returns>
        </member>
        <member name="M:QuickTools.LoopInput.Lines">
            <summary>
            This Return each lines of the Loop Input that was captured 
            </summary>
            <returns>The lines.</returns>
        </member>
        <member name="T:QuickTools.Print">
            <summary>
            Print print a list of the array that is passed through 
            and was created to avoid creatting forloops everywhere
            just because .
            </summary>
        </member>
        <member name="M:QuickTools.Print.List(System.Object[])">
            <summary>
            List the entire file array 
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Print.List(System.Collections.Generic.List{System.String})">
            <summary>
            List the entire file array 
            </summary>
            <param name="list">Array.</param>
        </member>
        <member name="M:QuickTools.Print.List(System.Int32[])">
            <summary>
            List the entire file array 
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Print.List(System.String[])">
            <summary>
            List the entire file array 
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Print.List(System.Byte[])">
            <summary>
            List the entire file array 
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Print.List(System.Boolean[])">
            <summary>
            List the entire file array 
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="M:QuickTools.Print.List(System.Double[])">
            <summary>
            List the entire file array 
            </summary>
            <param name="array">Array.</param>
        </member>
        <member name="T:QuickTools.ArrowKey">
            <summary>
            This Class in sintended to improve the Options Class
            which seems to me  really anticated  and this one provides movements
            with all the arrow keys
            </summary>
        </member>
        <member name="F:QuickTools.ArrowKey.X">
            <summary>
            The x.
            </summary>
        </member>
        <member name="F:QuickTools.ArrowKey.Y">
            <summary>
            The y.
            </summary>
        </member>
        <member name="M:QuickTools.ArrowKey.Up">
            <summary>
            This fields has direct acces but as it returns an array 
            the method GetLocation  can provide the number only in an object type 
            </summary>
        </member>
        <member name="M:QuickTools.ArrowKey.Capture(System.String)">
            <summary>
            Capture the specified condition.
            </summary>
            <param name="condition">Condition.</param>
        </member>
        <member name="M:QuickTools.ArrowKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.ArrowKey"/> class.
            </summary>
        </member>
        <member name="M:QuickTools.ArrowKey.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.ArrowKey"/> class.
            </summary>
            <param name="intitialX">Intitial x.</param>
            <param name="initialY">Initial y.</param>
        </member>
        <member name="M:QuickTools.ArrowKey.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.ArrowKey"/> class.
            </summary>
            <param name="intitialX">Intitial x.</param>
            <param name="initialY">Initial y.</param>
            <param name="SwitchUpDown">If set to <c>true</c> switch up down.</param>
        </member>
        <member name="T:QuickTools.Secure">
            <summary>
            Secure.
            </summary>
            <summary>
            The secure class is a class that uses the Aes tecnology to encrypt data by using
            a public key and a 
            </summary>
        </member>
        <member name="M:QuickTools.Secure.Decrypt(System.Byte[],System.Object,System.Byte[])">
            <summary>
            Decrypt the specified cipherText text  with a password.
            and this is the AUTOMATIC way of doing it 
            </summary>
            <returns>The decrypt.</returns>
            <param name="cipherText">Cipher text.</param>
            <param name="password">Password.</param>
            <param name="iv">Iv.</param>
        </member>
        <member name="M:QuickTools.Secure.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt the specified cipherText with password, Key and IV
            This is the manual way of Decrypting the data , please remember if you used the
            automatic way to  Encrypt it ,  you should use the automatic way 
            </summary>
            <returns>The decrypt.</returns>
            <param name="cipherText">Cipher text.</param>
            <param name="Key">Key.</param>
            <param name="IV">Iv.</param>
        </member>
        <member name="F:QuickTools.Secure.AllowToSaveKey">
            <summary>
            This allow the encriptor to either try to save the scure key or not  and is set to FALSE <see langword="false"/>  by default for security reasons
            </summary>
        </member>
        <member name="F:QuickTools.Secure.PublicKey">
            <summary>
            This will contain the public key used to encrypt the file 
            be carefull it will stay on memory ONLY 
            </summary>
        </member>
        <member name="F:QuickTools.Secure.RowPublicKey">
            <summary>
            This temporaly holds the public Key in an string format 
            </summary>
        </member>
        <member name="M:QuickTools.Secure.Encrypt(System.String,System.Object)">
            <summary>
            Encrypt the specified plainText with the password given 
            please remember that you will need the Pulic key to Decrypt the text
            THIS IS THE AUTOMATIC WAY OF DOING IT . 
            </summary>
            <returns>The encrypt.</returns>
            <param name="plainText">Plain text.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:QuickTools.Secure.Encrypt">
            <summary>
            This Encription Method is used when you initialize the class with 
            the arguments  of text , key and iv  IF this is your first time using the class
            please use the more simpler way 
            </summary>
            <returns>The encrypt.</returns>
        </member>
        <member name="M:QuickTools.Secure.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Secure"/> class.
            </summary>
        </member>
        <member name="M:QuickTools.Secure.#ctor(System.Object,System.Byte[],System.Byte[])">
            <summary>
            This inizializtion gives you full controll of how to Encrypter the file 
            </summary>
            <param name="clearText">Clear text.</param>
            <param name="key">Key.</param>
            <param name="iv">Iv.</param>
        </member>
        <member name="T:QuickTools.Cache">
            <summary>
            This is a class that create xml files that can be used to save
            simple information related with the program  and wants just a simple 
            utility that can provide the settings features without having to add extra nugetpackages 
            </summary>
        </member>
        <member name="F:QuickTools.Cache.AtributeName">
            <summary>
            Name of the atribute that will be added 
            </summary>
        </member>
        <member name="F:QuickTools.Cache.FileValue">
            <summary>
            This set the value of the atribute
            </summary>
        </member>
        <member name="M:QuickTools.Cache.DeleteItem">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:QuickTools.Cache.AddItem(System.String,System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="tributeName">Tribute name.</param>
            <param name="fileValue">File value.</param>
        </member>
        <member name="M:QuickTools.Cache.NewItem(System.String,System.String)">
            <summary>
            Add new  item.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:QuickTools.Cache.SaveItem(System.String,System.String)">
            <summary>
            Saves the item.
            </summary>
            <param name="atribute">Atribute.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:QuickTools.Cache.GetItem(System.String)">
            <summary>
            Gets the item.
            </summary>
            <returns>The item.</returns>
            <param name="atribute">Atribute.</param>
        </member>
        <member name="M:QuickTools.Cache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Cache"/> class.
            </summary>
        </member>
        <member name="M:QuickTools.Cache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Cache"/> class.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:QuickTools.Cache.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:QuickTools.Cache"/> class.
            </summary>
            <param name="fileName">File name.</param>
            <param name="atribute">Atribute.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:MyRedactedNamespace.ProcessProtection">
            <summary>
            Class responsible for exposing undocumented functionality making the host process unkillable.
            </summary>
        </member>
        <member name="F:MyRedactedNamespace.ProcessProtection.s_isProtected">
            <summary>
            Flag for maintaining the state of protection.
            </summary>
        </member>
        <member name="F:MyRedactedNamespace.ProcessProtection.s_isProtectedLock">
            <summary>
            For synchronizing our current state.
            </summary>
        </member>
        <member name="P:MyRedactedNamespace.ProcessProtection.IsProtected">
            <summary>
            Gets whether or not the host process is currently protected.
            </summary>
        </member>
        <member name="M:MyRedactedNamespace.ProcessProtection.Protect">
            <summary>
            If not alreay protected, will make the host process a system-critical process so it
            cannot be terminated without causing a shutdown of the entire system.
            </summary>
        </member>
        <member name="M:MyRedactedNamespace.ProcessProtection.Unprotect">
            <summary>
            If already protected, will remove protection from the host process, so that it will no
            longer be a system-critical process and thus will be able to shut down safely.
            </summary>
        </member>
        <member name="T:Tester.Input">
            <summary>
            This handles an imput handler that execute a function while is reading input
            </summary>
        </member>
        <member name="F:Tester.Input.Key">
            <summary>
            The key .
            </summary>
        </member>
        <member name="F:Tester.Input.KeyChar">
            <summary>
            The key char.
            </summary>
        </member>
        <member name="F:Tester.Input.InputList">
            <summary>
            The input list.
            </summary>
        </member>
        <member name="M:Tester.Input.Read(System.Action)">
            <summary>
            Read this The Input letter by letter.
            </summary>
        </member>
        <member name="M:Tester.Input.Read">
            <summary>
            Read this The Input letter by letter.
            </summary>
        </member>
        <member name="M:Tester.Input.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tester.Input"/> class.
            </summary>
        </member>
        <member name="M:Tester.Input.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Tester.Input"/> class.
            </summary>
        </member>
        <member name="T:Tester.PanelBody">
            <summary>
            Panel body.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.Text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.Index">
            <summary>
            The index.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.LocationX">
            <summary>
            The location x.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.LocationY">
            <summary>
            The location y.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.Y">
            <summary>
            The y.
            </summary>
        </member>
        <member name="F:Tester.PanelBody.X">
            <summary>
            The x.
            </summary>
        </member>
        <member name="M:Tester.PanelBody.Write(System.Object,System.Int32,System.Int32)">
            <summary>
            Write the specified value, x and y.
            </summary>
            <param name="value">Value.</param>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="T:Tester.Panel">
            <summary>
            Panel.
            </summary>
        </member>
        <member name="M:Tester.Panel.AddItem(System.String,System.String)">
            <summary>
            Adds the item.
            </summary>
            <param name="name">Name.</param>
            <param name="text">Text.</param>
        </member>
        <member name="M:Tester.Panel.Display">
            <summary>
            Display this instance.
            </summary>
        </member>
        <member name="M:Tester.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Tester.Panel"/> class.
            </summary>
        </member>
        <member name="M:Tester.Panel.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tester.Panel"/> class.
            </summary>
            <param name="text">Text.</param>
        </member>
        <member name="M:Tester.Panel.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tester.Panel"/> class.
            </summary>
            <param name="text">Text.</param>
            <param name="locationX">Location x.</param>
            <param name="locationY">Location y.</param>
        </member>
    </members>
</doc>
